{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/LoginView/LoginView.module.css","views/LoginView/LoginView.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","LoginView","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","e","target","name","console","warn","className","s","login_form","onSubmit","preventDefault","login","autoComplete","type","onChange","Button","variant"],"mappings":"sKAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,WAAa,gC,sJC+DhBC,EA1DG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEUF,mBAAS,IAFnB,mBAEfG,EAFe,KAELC,EAFK,KAIhBC,EAAWC,cAEXC,EAAe,SAAAC,GAAM,IAAD,EACAA,EAAEC,OAAlBC,EADgB,EAChBA,KAAMlB,EADU,EACVA,MACd,OAAQkB,GACN,IAAK,QACHR,EAASV,GACT,MAEF,IAAK,WACHY,EAAYZ,GACZ,MAEF,QACEmB,QAAQC,KAAR,qBAA2BF,EAA3B,wBAaN,OACE,uBAAMG,UAAWC,IAAEC,WAAYC,SAVZ,SAAAR,GACnBA,EAAES,iBAEFZ,EAASa,YAAM,CAAEjB,QAAOE,cAExBD,EAAS,IACTE,EAAY,KAI2Ce,aAAa,MAApE,UACE,0CAEE,uBACEC,KAAK,QACLV,KAAK,QACLlB,MAAOS,EACPoB,SAAUd,OAGd,6CAEE,uBACEa,KAAK,WACLV,KAAK,WACLlB,MAAOW,EACPkB,SAAUd,OAGd,cAACe,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAA/B","file":"static/js/LoginPage.5b1ec430.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_form\":\"LoginView_login_form__2wQKN\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport s from './LoginView.module.css';\nimport { login } from '../../redux/auth/auth-operations';\nimport { Button } from 'react-bootstrap';\n\nconst LoginView = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        console.warn(`Field type ${name} is not processed`);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(login({ email, password }));\n\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form className={s.login_form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label>\n        Email\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n        ></input>\n      </label>\n      <label>\n        Password\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n        ></input>\n      </label>\n      <Button variant=\"primary\" type=\"submit\">\n        Sign in\n      </Button>\n    </form>\n  );\n};\n\nexport default LoginView;\n"],"sourceRoot":""}